                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module test
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _printf
                                     13 	.globl _sleep
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 	.area	OSEG    (OVR,DATA)
                                     37 ;--------------------------------------------------------
                                     38 ; Stack segment in internal ram 
                                     39 ;--------------------------------------------------------
                                     40 	.area	SSEG
      000000                         41 __start__stack:
      000000                         42 	.ds	1
                                     43 
                                     44 ;--------------------------------------------------------
                                     45 ; indirectly addressable internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area ISEG    (DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; absolute internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area IABS    (ABS,DATA)
                                     52 	.area IABS    (ABS,DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; bit data
                                     55 ;--------------------------------------------------------
                                     56 	.area BSEG    (BIT)
                                     57 ;--------------------------------------------------------
                                     58 ; paged external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area PSEG    (PAG,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XSEG    (XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; absolute external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XABS    (ABS,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; external initialized ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XISEG   (XDATA)
                                     73 	.area HOME    (CODE)
                                     74 	.area GSINIT0 (CODE)
                                     75 	.area GSINIT1 (CODE)
                                     76 	.area GSINIT2 (CODE)
                                     77 	.area GSINIT3 (CODE)
                                     78 	.area GSINIT4 (CODE)
                                     79 	.area GSINIT5 (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area CSEG    (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; interrupt vector 
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
      000000                         87 __interrupt_vect:
      000000 02r00r00         [24]   88 	ljmp	__sdcc_gsinit_startup
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 	.globl __sdcc_gsinit_startup
                                     97 	.globl __sdcc_program_startup
                                     98 	.globl __start__stack
                                     99 	.globl __mcs51_genXINIT
                                    100 	.globl __mcs51_genXRAMCLEAR
                                    101 	.globl __mcs51_genRAMCLEAR
                                    102 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  103 	ljmp	__sdcc_program_startup
                                    104 ;--------------------------------------------------------
                                    105 ; Home
                                    106 ;--------------------------------------------------------
                                    107 	.area HOME    (CODE)
                                    108 	.area HOME    (CODE)
      000003                        109 __sdcc_program_startup:
      000003 02r00r00         [24]  110 	ljmp	_main
                                    111 ;	return from main will return to caller
                                    112 ;--------------------------------------------------------
                                    113 ; code
                                    114 ;--------------------------------------------------------
                                    115 	.area CSEG    (CODE)
                                    116 ;------------------------------------------------------------
                                    117 ;Allocation info for local variables in function 'main'
                                    118 ;------------------------------------------------------------
                                    119 ;age                       Allocated to registers 
                                    120 ;height                    Allocated to registers 
                                    121 ;tmpName                   Allocated to registers 
                                    122 ;a                         Allocated to registers 
                                    123 ;------------------------------------------------------------
                                    124 ;	test.c:8: void main(void){
                                    125 ;	-----------------------------------------
                                    126 ;	 function main
                                    127 ;	-----------------------------------------
      000000                        128 _main:
                           000007   129 	ar7 = 0x07
                           000006   130 	ar6 = 0x06
                           000005   131 	ar5 = 0x05
                           000004   132 	ar4 = 0x04
                           000003   133 	ar3 = 0x03
                           000002   134 	ar2 = 0x02
                           000001   135 	ar1 = 0x01
                           000000   136 	ar0 = 0x00
                                    137 ;	test.c:13: char *tmpName = "JANG Sung Hwan";
                                    138 ;	test.c:16: printf("Age : %d\n", age);
      000000 74 21            [12]  139 	mov	a,#0x21
      000002 C0 E0            [24]  140 	push	acc
      000004 E4               [12]  141 	clr	a
      000005 C0 E0            [24]  142 	push	acc
      000007 74r0F            [12]  143 	mov	a,#___str_1
      000009 C0 E0            [24]  144 	push	acc
      00000B 74s00            [12]  145 	mov	a,#(___str_1 >> 8)
      00000D C0 E0            [24]  146 	push	acc
      00000F 74 80            [12]  147 	mov	a,#0x80
      000011 C0 E0            [24]  148 	push	acc
      000013 12r00r00         [24]  149 	lcall	_printf
      000016 E5 81            [12]  150 	mov	a,sp
      000018 24 FB            [12]  151 	add	a,#0xfb
      00001A F5 81            [12]  152 	mov	sp,a
                                    153 ;	test.c:17: printf("Height : %d\n", height);
      00001C 74 AD            [12]  154 	mov	a,#0xad
      00001E C0 E0            [24]  155 	push	acc
      000020 E4               [12]  156 	clr	a
      000021 C0 E0            [24]  157 	push	acc
      000023 74r19            [12]  158 	mov	a,#___str_2
      000025 C0 E0            [24]  159 	push	acc
      000027 74s00            [12]  160 	mov	a,#(___str_2 >> 8)
      000029 C0 E0            [24]  161 	push	acc
      00002B 74 80            [12]  162 	mov	a,#0x80
      00002D C0 E0            [24]  163 	push	acc
      00002F 12r00r00         [24]  164 	lcall	_printf
      000032 E5 81            [12]  165 	mov	a,sp
      000034 24 FB            [12]  166 	add	a,#0xfb
      000036 F5 81            [12]  167 	mov	sp,a
                                    168 ;	test.c:18: printf("%s\n", tmpName);
      000038 74r00            [12]  169 	mov	a,#___str_0
      00003A C0 E0            [24]  170 	push	acc
      00003C 74s00            [12]  171 	mov	a,#(___str_0 >> 8)
      00003E C0 E0            [24]  172 	push	acc
      000040 74 80            [12]  173 	mov	a,#0x80
      000042 C0 E0            [24]  174 	push	acc
      000044 74r26            [12]  175 	mov	a,#___str_3
      000046 C0 E0            [24]  176 	push	acc
      000048 74s00            [12]  177 	mov	a,#(___str_3 >> 8)
      00004A C0 E0            [24]  178 	push	acc
      00004C 74 80            [12]  179 	mov	a,#0x80
      00004E C0 E0            [24]  180 	push	acc
      000050 12r00r00         [24]  181 	lcall	_printf
      000053 E5 81            [12]  182 	mov	a,sp
      000055 24 FA            [12]  183 	add	a,#0xfa
      000057 F5 81            [12]  184 	mov	sp,a
                                    185 ;	test.c:19: printf("Age: %d Height: %d tmpName: %d char : %d\n", sizeof(age), sizeof(height), sizeof(tmpName), sizeof(a));
      000059 74 01            [12]  186 	mov	a,#0x01
      00005B C0 E0            [24]  187 	push	acc
      00005D E4               [12]  188 	clr	a
      00005E C0 E0            [24]  189 	push	acc
      000060 74 03            [12]  190 	mov	a,#0x03
      000062 C0 E0            [24]  191 	push	acc
      000064 E4               [12]  192 	clr	a
      000065 C0 E0            [24]  193 	push	acc
      000067 74 02            [12]  194 	mov	a,#0x02
      000069 C0 E0            [24]  195 	push	acc
      00006B E4               [12]  196 	clr	a
      00006C C0 E0            [24]  197 	push	acc
      00006E 74 02            [12]  198 	mov	a,#0x02
      000070 C0 E0            [24]  199 	push	acc
      000072 E4               [12]  200 	clr	a
      000073 C0 E0            [24]  201 	push	acc
      000075 74r2A            [12]  202 	mov	a,#___str_4
      000077 C0 E0            [24]  203 	push	acc
      000079 74s00            [12]  204 	mov	a,#(___str_4 >> 8)
      00007B C0 E0            [24]  205 	push	acc
      00007D 74 80            [12]  206 	mov	a,#0x80
      00007F C0 E0            [24]  207 	push	acc
      000081 12r00r00         [24]  208 	lcall	_printf
      000084 E5 81            [12]  209 	mov	a,sp
      000086 24 F5            [12]  210 	add	a,#0xf5
      000088 F5 81            [12]  211 	mov	sp,a
                                    212 ;	test.c:21: sleep(10000);
      00008A 90 27 10         [24]  213 	mov	dptr,#0x2710
      00008D 12r00r96         [24]  214 	lcall	_sleep
                                    215 ;	test.c:23: sleep(10000);
      000090 90 27 10         [24]  216 	mov	dptr,#0x2710
                                    217 ;	test.c:27: }
      000093 02r00r96         [24]  218 	ljmp	_sleep
                                    219 ;------------------------------------------------------------
                                    220 ;Allocation info for local variables in function 'sleep'
                                    221 ;------------------------------------------------------------
                                    222 ;tick                      Allocated to registers 
                                    223 ;------------------------------------------------------------
                                    224 ;	test.c:29: void sleep(int tick){
                                    225 ;	-----------------------------------------
                                    226 ;	 function sleep
                                    227 ;	-----------------------------------------
      000096                        228 _sleep:
      000096 AE 82            [24]  229 	mov	r6,dpl
      000098 AF 83            [24]  230 	mov	r7,dph
                                    231 ;	test.c:30: while(tick){
      00009A                        232 00101$:
      00009A EE               [12]  233 	mov	a,r6
      00009B 4F               [12]  234 	orl	a,r7
      00009C 60 07            [24]  235 	jz	00104$
                                    236 ;	test.c:31: tick--;
      00009E 1E               [12]  237 	dec	r6
      00009F BE FF 01         [24]  238 	cjne	r6,#0xff,00116$
      0000A2 1F               [12]  239 	dec	r7
      0000A3                        240 00116$:
      0000A3 80 F5            [24]  241 	sjmp	00101$
      0000A5                        242 00104$:
                                    243 ;	test.c:33: }
      0000A5 22               [24]  244 	ret
                                    245 	.area CSEG    (CODE)
                                    246 	.area CONST   (CODE)
                                    247 	.area CONST   (CODE)
      000000                        248 ___str_0:
      000000 4A 41 4E 47 20 53 75   249 	.ascii "JANG Sung Hwan"
             6E 67 20 48 77 61 6E
      00000E 00                     250 	.db 0x00
                                    251 	.area CSEG    (CODE)
                                    252 	.area CONST   (CODE)
      00000F                        253 ___str_1:
      00000F 41 67 65 20 3A 20 25   254 	.ascii "Age : %d"
             64
      000017 0A                     255 	.db 0x0a
      000018 00                     256 	.db 0x00
                                    257 	.area CSEG    (CODE)
                                    258 	.area CONST   (CODE)
      000019                        259 ___str_2:
      000019 48 65 69 67 68 74 20   260 	.ascii "Height : %d"
             3A 20 25 64
      000024 0A                     261 	.db 0x0a
      000025 00                     262 	.db 0x00
                                    263 	.area CSEG    (CODE)
                                    264 	.area CONST   (CODE)
      000026                        265 ___str_3:
      000026 25 73                  266 	.ascii "%s"
      000028 0A                     267 	.db 0x0a
      000029 00                     268 	.db 0x00
                                    269 	.area CSEG    (CODE)
                                    270 	.area CONST   (CODE)
      00002A                        271 ___str_4:
      00002A 41 67 65 3A 20 25 64   272 	.ascii "Age: %d Height: %d tmpName: %d char : %d"
             20 48 65 69 67 68 74
             3A 20 25 64 20 74 6D
             70 4E 61 6D 65 3A 20
             25 64 20 63 68 61 72
             20 3A 20 25 64
      000052 0A                     273 	.db 0x0a
      000053 00                     274 	.db 0x00
                                    275 	.area CSEG    (CODE)
                                    276 	.area XINIT   (CODE)
                                    277 	.area CABS    (ABS,CODE)
